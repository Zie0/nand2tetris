// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Decode //
    DMux16 (in=instruction, sel=instruction[15], a=Ainstruction, b=Cinstruction);
    // C-instruction (execute)


    // ALU 
    Mux16 (a=Areg, b=inM, sel=c0, out=yALU);
    ALU (x=Dreg, y=yALU, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, zr=zr, ng=ng, out=outM)
    // End ALU //
    
    // Jump control //
    Not (in=zr, out=NOTzr);
    Not (in=ng, out=NOTng);
    // false = NoJMP
    And (a=NOTzr, b=NOTng, out=JGT);
    // zr = JEQ
    OR (a=zr, b=NOTng, out=JGE);
    // ng = JLT
    // NOTzr = JNE
    OR (a=zr, b=ng, out=JLE);
    // true = JMP

    Mux (a=false, b=JGT, sel=j3, out=s0);
    Mux (a=zr, b=JGE, sel=j3, out=s1);
    Mux (a=JLT, b=JNE, sel=j3, out=s2);
    Mux (a=JLE, b=false, sel=j3, out=s3);
    Mux (a=s0, b=s1, sel=j2, out=ns0);
    Mux (a=s2, b=s3, sel=j2, out=ns1);
    Mux (a=ns0, b=ns1, sel=j1, out=pcLOAD);
    // End Jump Control //
}